// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package jsonBenchmark

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8823d385DecodeGithubComSatmaelstormGoJsonBenchmark(in *jlexer.Lexer, out *RowElement) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "slug":
			out.Slug = string(in.String())
		case "add_info":
			(out.AddInfo).UnmarshalEasyJSON(in)
		case "record_count":
			out.RecordCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8823d385EncodeGithubComSatmaelstormGoJsonBenchmark(out *jwriter.Writer, in RowElement) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"slug\":"
		out.RawString(prefix)
		out.String(string(in.Slug))
	}
	{
		const prefix string = ",\"add_info\":"
		out.RawString(prefix)
		(in.AddInfo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"record_count\":"
		out.RawString(prefix)
		out.Int(int(in.RecordCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RowElement) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8823d385EncodeGithubComSatmaelstormGoJsonBenchmark(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RowElement) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8823d385EncodeGithubComSatmaelstormGoJsonBenchmark(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RowElement) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8823d385DecodeGithubComSatmaelstormGoJsonBenchmark(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RowElement) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8823d385DecodeGithubComSatmaelstormGoJsonBenchmark(l, v)
}
func easyjson8823d385DecodeGithubComSatmaelstormGoJsonBenchmark1(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rows":
			if in.IsNull() {
				in.Skip()
				out.Rows = nil
			} else {
				in.Delim('[')
				if out.Rows == nil {
					if !in.IsDelim(']') {
						out.Rows = make([]RowElement, 0, 0)
					} else {
						out.Rows = []RowElement{}
					}
				} else {
					out.Rows = (out.Rows)[:0]
				}
				for !in.IsDelim(']') {
					var v1 RowElement
					(v1).UnmarshalEasyJSON(in)
					out.Rows = append(out.Rows, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8823d385EncodeGithubComSatmaelstormGoJsonBenchmark1(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"rows\":"
		out.RawString(prefix[1:])
		if in.Rows == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Rows {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8823d385EncodeGithubComSatmaelstormGoJsonBenchmark1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8823d385EncodeGithubComSatmaelstormGoJsonBenchmark1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8823d385DecodeGithubComSatmaelstormGoJsonBenchmark1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8823d385DecodeGithubComSatmaelstormGoJsonBenchmark1(l, v)
}
func easyjson8823d385DecodeGithubComSatmaelstormGoJsonBenchmark2(in *jlexer.Lexer, out *ApiAnswer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "response":
			(out.Response).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8823d385EncodeGithubComSatmaelstormGoJsonBenchmark2(out *jwriter.Writer, in ApiAnswer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"response\":"
		out.RawString(prefix[1:])
		(in.Response).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ApiAnswer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8823d385EncodeGithubComSatmaelstormGoJsonBenchmark2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ApiAnswer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8823d385EncodeGithubComSatmaelstormGoJsonBenchmark2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ApiAnswer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8823d385DecodeGithubComSatmaelstormGoJsonBenchmark2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ApiAnswer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8823d385DecodeGithubComSatmaelstormGoJsonBenchmark2(l, v)
}
func easyjson8823d385DecodeGithubComSatmaelstormGoJsonBenchmark3(in *jlexer.Lexer, out *AddInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "name":
			out.Name = string(in.String())
		case "slug":
			out.Slug = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8823d385EncodeGithubComSatmaelstormGoJsonBenchmark3(out *jwriter.Writer, in AddInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"slug\":"
		out.RawString(prefix)
		out.String(string(in.Slug))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8823d385EncodeGithubComSatmaelstormGoJsonBenchmark3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8823d385EncodeGithubComSatmaelstormGoJsonBenchmark3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8823d385DecodeGithubComSatmaelstormGoJsonBenchmark3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8823d385DecodeGithubComSatmaelstormGoJsonBenchmark3(l, v)
}
